@page "/Simulation"
@using System.Diagnostics
@using DIZZ_1.BackEnd
@using DIZZ_1.BackEnd.Simulation
@using DIZZ_1.BackEnd.Strategies
@using DIZZ_1.Components.Chart
@rendermode InteractiveServer

<h1>Simulation</h1>

@if (MainApp.Instance.StrategiesHandler.HasStrategies())
{
    <div class="card card-body bg-dark text-white p-4" style="width: 25rem;">
        <label>Strategy</label>
        <select class="form-control mt-1" @bind="_selectedStrategyName">
            @foreach (Strategy? strategy in MainApp.Instance.StrategiesHandler.Strategies)
            {
                <option value="@strategy!.Name">
                    @strategy.Name
                </option>
            }
        </select>

        <label class="mt-3">Replication Count</label>
        <input @bind="_replicationCount" class="form-control" type="number" min="1" step="100"/>
        <button class="btn btn-primary mt-3" @onclick="RunSimulation">
            Run Simulation
        </button>
        <button class="btn btn-danger mt-3" @onclick="Stop">
            Stop
        </button>
    </div>

    <RealTimeChart
        @ref="_chart"
        Title="Simulation"
        XAxisLabel="Replication"
        YAxisLabel="Jan's Costs"
    />
}
else
{
    <p>No strategies were found.</p>
}

@code {
    private string _selectedStrategyName =
        MainApp.Instance.StrategiesHandler.Strategies[0]!.Name;

    private MainSimulation? _simulation;
    public IProgress<SimulationProgress<double>> Progress { get; }
    private int _replicationCount = 100_000;
    private RealTimeChart _chart = new();


    public Simulation()
    {
        Progress = new Progress<SimulationProgress<double>>(async void (progress) =>
        {
            if (await Config.ShouldBePrintedToGraph(progress.CurrentIteration, _replicationCount))
            {
                await _chart.AddValue(progress.Cumulative / progress.CurrentIteration);
            }
        });
    }

    private async Task RunSimulation()
    {
        Strategy? strategyToRun = MainApp.Instance.StrategiesHandler
            .Strategies.First(s => s!.Name == _selectedStrategyName);

        await RunStrategy(strategyToRun!);
        Console.WriteLine("Done");
    }

    private async Task RunStrategy(Strategy strategyToRun)
    {
        await _chart.Reset();
        _simulation = new MainSimulation(strategyToRun);
        double solution = await _simulation.RunCompleteSimulation(_replicationCount, Progress);
        await _chart.AddValue(solution);
    }

    private void Stop()
    {
        _simulation?.RequestCancellation();
        StateHasChanged();
    }
}
