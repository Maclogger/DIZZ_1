@page "/Needle"
@using DIZZ_1.BackEnd.Needle
@using DIZZ_1.BackEnd.Simulation
@using DIZZ_1.Components.Chart
@rendermode InteractiveServer
<h1>Buffon's Needle</h1>
<div class="d-flex flex-column card bg-dark p-4 mb-3 text-white" style="width: 25rem;">
    <label class="">Replication Count</label>
    <input class="form-control" type="number" @bind="_replicationCount" min="2" step="10"/>

    <label class="mt-3">Circle Diameter</label>
    <input class="form-control" type="number" @bind="_diameter" min="0" step="0.1"/>

    <label class="mt-3">Needle Length</label>
    <input class="form-control" type="number" @bind="_needleLength" min="0" step="0.1"/>

    <button class="btn btn-primary mt-3" @onclick="Run">Run</button>
    <button class="btn btn-danger mt-3 mb-1" @onclick="Stop" disabled="@_isStopped">Stop</button>
</div>


@if (_pi != null)
{
    <div class="card bg-dark-subtle p-3 mt-4 w-25">
        <h5 class="p-0 m-0">Pi approximation: @_pi</h5>
    </div>
}

<RealTimeChart @ref="_chart" Title="Pi Approximation" XAxisLabel="Replication" YAxisLabel="Pi"/>
<p>Replications x@(_replicationCount / 1000)</p>

@code {
    private double? _pi = null;
    private int _replicationCount = 10;
    private double _needleLength = 5;
    private double _diameter = 10;
    private bool _isStopped = true;

    RealTimeChart _chart = new();

    public Needle()
    {
        Progress = new Progress<SimulationProgress<int>>(async void (progress) =>
        {
            if (progress.CurrentIteration % (_replicationCount / 1000) == 0)
            {
                _pi = _needleLength / (_diameter * ((double)progress.Cumulative / progress.CurrentIteration));
                //Console.WriteLine($"{progress.CurrentIteration}: {progress.Cumulative} - {_pi}");
                await _chart.AddValue(_pi.Value);
                StateHasChanged();
            }
        });
    }

    public IProgress<SimulationProgress<int>> Progress { get; }
    private CancellationTokenSource Cts { get; set; }

    public async Task Run()
    {
        _isStopped = false;
        await _chart.Reset();
        BuffonNeedle needle = new BuffonNeedle(_diameter, _needleLength);
        Cts = needle.Cts;
        _pi = await needle.RunCompleteSimulation(_replicationCount, Progress);
        _isStopped = true;
        StateHasChanged();
    }

    private void Stop()
    {
        Console.WriteLine("LOL");
        Cts.Cancel();
    }

}