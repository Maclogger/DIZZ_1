@page "/generators"
@using DIZZ_1.BackEnd
@using DIZZ_1.BackEnd.Generators
@using DIZZ_1.BackEnd.Generators.Discrete
@using DIZZ_1.BackEnd.Generators.Real
@using DIZZ_1.Components.Basic
@rendermode InteractiveServer

<h3>Generators</h3>

<div class="container-fluid">
    <div class="row">
        <GeneratorCard Headline="Discrete Uniform"
                       Initialize="InitializeUniformDiscreteGenerator"
                       Generator="MainApp.Instance.Generators.UniformDiscreteGenerator">
            <label>Min</label>
            <input @bind="MinUniDisc" step="1"/>

            <label>Max</label>
            <input @bind="MaxUniDisc" step="1"/>
        </GeneratorCard>

        <GeneratorCard Headline="Real Uniform"
                       Initialize="InitializeUniformRealGenerator"
                       Generator="MainApp.Instance.Generators.UniformRealGenerator">
            <label>Min</label>
            <input @bind="MinUniReal" step="0.1"/>

            <label>Max</label>
            <input @bind="MaxUniReal" step="0.1"/>
        </GeneratorCard>


        <GeneratorCard Headline="Real Empiric"
                       Initialize="InitializeUniformRealGenerator"
                       Generator="MainApp.Instance.Generators.UniformRealGenerator">

            <div class="container">
                @foreach (var row in _empiricRows)
                {
                    <div class="row">
                        <EmpiricRow Min="@row.Min"
                                    Max="@row.Max"
                                    Probability="@row.Probability"
                                    OnRemove="@(() => RemoveRow(row))"/>
                    </div>
                }
            </div>

            <div class="row">
                <button class="btn btn-primary mt-2" @onclick="AddRow">Add random distribution</button>
            </div>
        </GeneratorCard>
    </div>
</div>

@code {
    public int MinUniDisc = 0;
    public int MaxUniDisc = 1;

    public Generator<int> InitializeUniformDiscreteGenerator(Generator<int> generator, int seed)
    {
        MainApp.Instance.Generators.UniformDiscreteGenerator = new UniformDiscreteGenerator(seed, MinUniDisc, MaxUniDisc);
        return MainApp.Instance.Generators.UniformDiscreteGenerator;
    }


    public double MinUniReal = 0.0;
    public double MaxUniReal = 1.0;

    private Generator<double> InitializeUniformRealGenerator(Generator<double> generator, int seed)
    {
        MainApp.Instance.Generators.UniformRealGenerator = new UniformRealGenerator(seed, MinUniReal, MaxUniReal);
        return MainApp.Instance.Generators.UniformRealGenerator;
    }

    private readonly List<EmpiricRowModel> _empiricRows = new();

    private void AddRow()
    {
        _empiricRows.Add(new EmpiricRowModel { Min = 0, Max = 0, Probability = 0.0 });
    }

    private void RemoveRow(EmpiricRowModel row)
    {
        _empiricRows.Remove(row);
    }

    private class EmpiricRowModel
    {
        public int Min { get; set; }
        public int Max { get; set; }
        public double Probability { get; set; }
    }

}