@page "/generators"
@using DIZZ_1.BackEnd
@using DIZZ_1.BackEnd.Generators
@using DIZZ_1.BackEnd.Generators.Discrete
@using DIZZ_1.BackEnd.Generators.Empiric
@using DIZZ_1.BackEnd.Generators.Real
@using DIZZ_1.Components.Basic
@rendermode InteractiveServer

<h3>Generators</h3>

<div class="container-fluid">
    <div class="row">
        <GeneratorCard Headline="Discrete Uniform"
                       Initialize="InitializeUniformDiscreteGenerator"
                       Generator="MainApp.Instance.Generators.UniformDiscreteGenerator">
            <label>Min</label>
            <input @bind="MinUniDisc" step="1"/>

            <label>Max</label>
            <input @bind="MaxUniDisc" step="1"/>
        </GeneratorCard>

        <GeneratorCard Headline="Real Uniform"
                       Initialize="InitializeUniformRealGenerator"
                       Generator="MainApp.Instance.Generators.UniformRealGenerator">
            <label>Min</label>
            <input @bind="MinUniReal" step="0.1"/>

            <label>Max</label>
            <input @bind="MaxUniReal" step="0.1"/>
        </GeneratorCard>

        <GeneratorCard Headline="Real Empiric"
                       Initialize="InitializeEmpiricRealGenerator"
                       Generator="MainApp.Instance.Generators.UniformRealGenerator">
            <div class="container">
                @foreach (EmpiricDistrModel<double> row in _empiricRows)
                {
                    <div class="row">
                        <EmpiricRow
                            DistrModel="row"
                            OnRemove="@(() => RemoveRow(row))"
                        />
                    </div>
                }
                <div class="row">
                    <button class="btn btn-primary mt-2" @onclick="AddRow">Add random distribution</button>
                </div>
            </div>
        </GeneratorCard>
    </div>


</div>

@code {
    public int MinUniDisc = 0;
    public int MaxUniDisc = 1;

    public Generator<int> InitializeUniformDiscreteGenerator()
    {
        MainApp.Instance.Generators.UniformDiscreteGenerator = new UniformDiscreteGenerator(MinUniDisc, MaxUniDisc);
        return MainApp.Instance.Generators.UniformDiscreteGenerator;
    }

    public double MinUniReal = 0.0;
    public double MaxUniReal = 1.0;

    private Generator<double> InitializeUniformRealGenerator()
    {
        MainApp.Instance.Generators.UniformRealGenerator = new UniformRealGenerator(MinUniReal, MaxUniReal);
        return MainApp.Instance.Generators.UniformRealGenerator;
    }

    private readonly List<EmpiricDistrModel<double>> _empiricRows = new();

    private void AddRow()
    {
        _empiricRows.Add(new EmpiricDistrModel<double>(new UniformRealGenerator(0.0, 100.0), 1.0));
    }

    private void RemoveRow(EmpiricDistrModel<double> row)
    {
        _empiricRows.Remove(row);
    }

    private Generator<double> InitializeEmpiricRealGenerator()
    {
        EmpiricGenerator<double> gen = new(_empiricRows);

        EmpiricGenerator<double> generator = EmpiricGeneratorFactory.CreateRealGenerator(
        [
            (5.0, 10.0, 0.4),
            (10.0, 50.0, 0.3),
            (50.0, 70.0, 0.2),
            (70.0, 80.0, 0.06),
            (80.0, 95.0, 0.04)
        ]);
        MainApp.Instance.Generators.EmpiricRealGenerator = gen;
        Console.WriteLine(gen);
        return gen;
    }
}