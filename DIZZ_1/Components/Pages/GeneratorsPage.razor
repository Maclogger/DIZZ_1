@page "/tester"
@using DIZZ_1.BackEnd
@using DIZZ_1.BackEnd.Generators
@using DIZZ_1.BackEnd.Generators.Discrete
@using DIZZ_1.BackEnd.Generators.Empiric
@using DIZZ_1.BackEnd.Generators.Real
@using DIZZ_1.Components.Basic
@rendermode InteractiveServer


<div class="container-fluid mb-5">
    <div class="row">
        <h2 class="mx-1">Tester</h2>
    </div>
    <div class="row">
        <!-- Discrete Uniform Generator -->
        <GeneratorCard Headline="Discrete Uniform"
                       Initialize="@(() => InitializeUniformGenerator<int>(MinUniDisc, MaxUniDisc, true))"
                       Generator="MainApp.Instance.Generators.UniformDiscreteGenerator">
            <label>Min</label>
            <input class="form-control" type="number" @bind="MinUniDisc" step="1"/>

            <label>Max</label>
            <input class="form-control" type="number" @bind="MaxUniDisc" step="1"/>
        </GeneratorCard>

        <!-- Real Uniform Generator -->
        <GeneratorCard Headline="Real Uniform"
                       Initialize="@(() => InitializeUniformGenerator<double>(MinUniReal, MaxUniReal, false))"
                       Generator="MainApp.Instance.Generators.UniformRealGenerator">
            <label>Min</label>
            <input class="form-control" type="number" @bind="MinUniReal" step="0.1"/>

            <label>Max</label>
            <input class="form-control" type="number" @bind="MaxUniReal" step="0.1"/>
        </GeneratorCard>

        <!-- Real Empiric Generator -->
        <GeneratorCard Headline="Real Empiric"
                       Initialize="@(() => InitializeEmpiricGenerator(_empiricRealRows, false))"
                       Generator="MainApp.Instance.Generators.EmpiricRealGenerator">
            <div class="container">
                @foreach (var row in _empiricRealRows)
                {
                    <EmpiricRealRow DistrModel="row" OnRemove="@(() => RemoveRow(row, _empiricRealRows))"/>
                }
                <div class="row">
                    <button class="btn btn-primary mt-2" @onclick="() => AddRow(_empiricRealRows, false)">
                        Add random distribution
                    </button>
                </div>
            </div>
        </GeneratorCard>

        <!-- Discrete Empiric Generator -->
        <GeneratorCard Headline="Discrete Empiric"
                       Initialize="@(() => InitializeEmpiricGenerator(_empiricDiscreteRows, true))"
                       Generator="MainApp.Instance.Generators.EmpiricDiscreteGenerator">
            <div class="container">
                @foreach (var row in _empiricDiscreteRows)
                {
                    <EmpiricDiscreteRow DistrModel="row" OnRemove="@(() => RemoveRow(row, _empiricDiscreteRows))"/>
                }
                <div class="row">
                    <button class="btn btn-primary mt-2" @onclick="() => AddRow(_empiricDiscreteRows, true)">
                        Add random distribution
                    </button>
                </div>
            </div>
        </GeneratorCard>
    </div>
</div>

@code {
    public int MinUniDisc = 0;
    public int MaxUniDisc = 100;
    public double MinUniReal = 0.0;
    public double MaxUniReal = 1.0;

    private readonly List<EmpiricDistrModel<double>> _empiricRealRows = new();
    private readonly List<EmpiricDistrModel<int>> _empiricDiscreteRows = new();

    private Generator<T> InitializeUniformGenerator<T>(T min, T max, bool isDiscrete)
    {
        if (isDiscrete)
        {
            UniformDiscreteGenerator generator = new UniformDiscreteGenerator(Convert.ToInt32(min), Convert.ToInt32(max));
            MainApp.Instance.Generators.UniformDiscreteGenerator = generator;
            return (generator as Generator<T>)!;
        }
        else
        {
            UniformRealGenerator generator = new UniformRealGenerator(Convert.ToDouble(min), Convert.ToDouble(max));
            MainApp.Instance.Generators.UniformRealGenerator = generator;
            return (generator as Generator<T>)!;
        }
    }

    private Generator<T> InitializeEmpiricGenerator<T>(List<EmpiricDistrModel<T>> rows, bool isDiscrete)
    {
        var generator = new EmpiricGenerator<T>(rows);

        if (isDiscrete)
        {
            MainApp.Instance.Generators.EmpiricDiscreteGenerator = generator as EmpiricGenerator<int>;
        }
        else
        {
            MainApp.Instance.Generators.EmpiricRealGenerator = generator as EmpiricGenerator<double>;
        }

        return generator;
    }

    private void AddRow<T>(List<EmpiricDistrModel<T>> rows, bool isDiscrete)
    {
        if (isDiscrete)
        {
            int newMinimum = 0;
            if (rows.Count >= 1)
            {
                newMinimum = (rows[^1].Generator! as UniformDiscreteGenerator)!.Max;
            }

            rows.Add(new EmpiricDistrModel<T>((new UniformDiscreteGenerator(newMinimum, newMinimum + 10) as Generator<T>)!, 0.5));
        }
        else
        {
            double newMinimum = 0;
            if (rows.Count >= 1)
            {
                newMinimum = (rows[^1].Generator! as UniformRealGenerator)!.Max;
            }

            rows.Add(new EmpiricDistrModel<T>((new UniformRealGenerator(newMinimum, newMinimum + 1.0) as Generator<T>)!, 0.5));
        }
    }

    private void RemoveRow<T>(EmpiricDistrModel<T> row, List<EmpiricDistrModel<T>> rows)
    {
        rows.Remove(row);
    }

}
